// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebApplication3.Models;

namespace WebApplication3.Data
{
    public partial class HomebrewerydbContext : DbContext
    {
        public HomebrewerydbContext()
        {
        }

        public HomebrewerydbContext(DbContextOptions<HomebrewerydbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Attempt> Attempts { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientRecipe> ClientRecipes { get; set; }
        public virtual DbSet<Picture> Pictures { get; set; }
        public virtual DbSet<Recipe> Recipes { get; set; }
        public virtual DbSet<Sample> Samples { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=ALEXEYDESKTOP\\SQLEXPRESS;Initial Catalog=HomeBreweryDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Attempt>(entity =>
            {
                entity.HasKey(e => new { e.AttemptId, e.ClientId, e.RecipeId });

                entity.ToTable("Attempt");

                entity.Property(e => e.AttemptId).HasColumnName("attempt_id");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.RecipeId).HasColumnName("recipe_id");

                entity.Property(e => e.ConfigLink)
                    .HasMaxLength(100)
                    .HasColumnName("configLink");

                entity.Property(e => e.FinishDate)
                    .HasColumnType("date")
                    .HasColumnName("finishDate");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("startDate");

                entity.HasOne(d => d.ClientRecipe)
                    .WithMany(p => p.Attempts)
                    .HasForeignKey(d => new { d.ClientId, d.RecipeId })
                    .HasConstraintName("FK_Attempt_ClientRecipe");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("Client");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("email");
            });

            modelBuilder.Entity<ClientRecipe>(entity =>
            {
                entity.HasKey(e => new { e.ClientId, e.RecipeId });

                entity.ToTable("ClientRecipe");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.RecipeId).HasColumnName("recipe_id");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientRecipes)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_ClientRecipe_Client");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ClientRecipes)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_ClientRecipe_Recipe");
            });

            modelBuilder.Entity<Picture>(entity =>
            {
                entity.HasKey(e => new { e.PictureId, e.RecipeId });

                entity.ToTable("Picture");

                entity.Property(e => e.PictureId).HasColumnName("picture_id");

                entity.Property(e => e.RecipeId).HasColumnName("recipe_id");

                entity.Property(e => e.Link)
                    .HasMaxLength(100)
                    .HasColumnName("link");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.Pictures)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Picture_Recipe");
            });

            modelBuilder.Entity<Recipe>(entity =>
            {
                entity.ToTable("Recipe");

                entity.Property(e => e.RecipeId).HasColumnName("recipe_id");

                entity.Property(e => e.Abv).HasColumnName("abv");

                entity.Property(e => e.Ba).HasColumnName("ba");

                entity.Property(e => e.ConfigLink)
                    .HasMaxLength(100)
                    .HasColumnName("configLink");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .HasColumnName("description");

                entity.Property(e => e.Fg).HasColumnName("fg");

                entity.Property(e => e.Ibu).HasColumnName("ibu");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Og).HasColumnName("og");

                entity.Property(e => e.Price)
                    .HasColumnType("money")
                    .HasColumnName("price");
            });

            modelBuilder.Entity<Sample>(entity =>
            {
                entity.HasKey(e => new { e.SampleId, e.ClientId });

                entity.ToTable("Sample");

                entity.Property(e => e.SampleId).HasColumnName("sample_id");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.DateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dateTime");

                entity.Property(e => e.TemperatureC).HasColumnName("temperatureC");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Samples)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Sample_Client");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}